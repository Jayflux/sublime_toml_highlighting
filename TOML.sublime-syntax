%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: TOML

file_extensions:
  - toml
  - tml

scope: source.toml

variables:
  # integer = [ "-" / "+" ] int
  # int = DIGIT / digit1-9 1*( DIGIT / "_" DIGIT )
  integer: '([\+\-]?) (?: [0-9] | [1-9] (?: [0-9] | _ [0-9] )+ )'
  # frac = "." DIGIT *( DIGIT / "_" DIGIT )
  frac: '\. [0-9] (?: [0-9] | _ [0-9] )*'
  # exp = ("e" / "E") integer
  exp: '[eE] {{integer}}'

  # date-time      = offset-date-time / local-date-time / local-date / local-time
  date_time: '{{offset_date_time}} | {{local_date_time}} | {{local_date}} | {{local_time}}'
  # date-fullyear  = 4DIGIT
  date_fullyear: '[0-9]{4}'
  # date-month     = 2DIGIT  ; 01-12
  date_month: '[0-1][0-9]'
  # date-mday      = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on month/year
  date_mday: '[0-3][0-9]'
  # time-hour      = 2DIGIT  ; 00-23
  time_hour: '[0-2][0-9]'
  # time-minute    = 2DIGIT  ; 00-59
  time_minute: '[0-5][0-9]'
  # time-second    = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second rules
  time_second: '[0-6][0-9]'
  # time-secfrac   = "." 1*DIGIT
  time_secfrac: '\.[0-9]+'
  # time-numoffset = ( "+" / "-" ) time-hour ":" time-minute
  time_numoffset: '[+-] {{time_hour}} : {{time_minute}}'
  # time-offset    = "Z" / time-numoffset
  time_offset: '(?: Z | {{time_numoffset}} )'
  # partial-time   = time-hour ":" time-minute ":" time-second [time-secfrac]
  partial_time: '{{time_hour}} : {{time_minute}} : {{time_second}} (?: {{time_secfrac}} )?'
  # full-date      = date-fullyear "-" date-month "-" date-mday
  full_date: '{{date_fullyear}} - {{date_month}} - {{date_mday}}'
  # full-time      = partial-time time-offset
  full_time: '{{partial_time}} {{time_offset}}'
  # offset-date-time = full-date "T" full-time
  offset_date_time: '{{full_date}} T {{full_time}}'
  # local-date-time = full-date "T" partial-time
  local_date_time: '{{full_date}} T {{partial_time}}'
  # local-date = full-date
  local_date: '{{full_date}}'
  # local-time = partial-time
  local_time: '{{partial_time}}'

contexts:
  main:
    - include: comments
    - include: tables
    - include: keys
    - include: illegal

  illegal:
    - match: (.*)
      # Invalid things -> everything unmatched
      captures:
        1: invalid.illegal.toml

  comments:
    - match: \s*((#).*)$
      captures:
        1: comment.line.number-sign.toml
        2: punctuation.definition.comment.toml

  data-types:
    - include: inlinetable
    - include: array
    - include: string
    - include: date-time
    - include: float
    - include: integer
    - include: boolean

  boolean:
    - match: (?<!\w)(true|false)(?!\w)
      captures:
        1: constant.language.toml

  integer:
    - match: '(?x) (?<!\w) {{integer}} (?!\w)'
      captures:
        0: constant.numeric.integer.toml
        1: keyword.operator.arithmetic.toml

  float:
    # float = integer ( frac / ( frac exp ) / exp )
    # frac = "." DIGIT *( DIGIT / "_" DIGIT )
    # exp = ("e" / "E") integer
    - match: |-
        (?x)
          (?<!\w)
            {{integer}}
            (?: {{frac}} | (?: {{frac}} {{exp}} ) | {{exp}} )
          (?!\w)
      captures:
        0: constant.numeric.float.toml
        1: keyword.operator.arithmetic.toml

  date-time:
    - match: '(?x) {{date_time}}'
      scope: constant.other.datetime.toml

  string:
    - match: "'''"
      comment: literal string block (no escape sequences)
      push:
        - meta_scope: string.quoted.triple.literal.block.toml
        - match: "'''"
          pop: true
    - match: "'.*?'"
      comment: literal string line (no escape sequences)
      scope: string.quoted.single.literal.line.toml
    - match: '"""'
      comment: basic string block
      push:
        - meta_scope: string.quoted.triple.basic.block.toml
        - match: '"""'
          pop: true
        - match: '[^"\\]*(?:\\.?[^"\\]*)*'
          scope: string.quoted.triple.basic.block.toml
    - match: '"[^"\\]*(?:\\.[^"\\]*)*"'
      comment: basic string line
      scope: string.quoted.single.basic.line.toml

  array:
    - match: '(?<!\w)(\[)\s*'
      comment: Array
      captures:
        1: punctuation.definition.array.toml
      push:
        - match: '\s*(\])(?!\w)'
          captures:
            1: punctuation.definition.array.toml
          pop: true
        - include: comments
        - include: data-types

  inlinetable:
    - match: '(?<!\w)(\{)\s*'
      captures:
        1: punctuation.definition.inlinetable.toml
      push:
        - match: '\s*(\})(?!\w)'
          captures:
            1: punctuation.definition.inlinetable.toml
          pop: true
        - include: keys
        - include: data-types

  keys:
    - match: (\s*=.*)$
      comment: Assignments without key are invalid
      scope: invalid.illegal.noKeyDefined.toml
    - match: '(\s*[A-Za-z_\-][A-Za-z0-9_\-]*\s*=)(?=\s*$)'
      comment: Assignments without value are unusual
      scope: invalid.deprecated.noValueGiven.toml
    - match: '\s*([A-Za-z_-][A-Za-z0-9_-]*|".+"|''.+''|[0-9]+)\s*(=)\s*'
      captures:
        1: keyword.key.toml
        2: punctuation.definition.keyValuePair.toml
      push:
        - match: '($|(?==)|\,|\s*(?=\}))'
          pop: true
        - include: comments
        - include: data-types
        - include: illegal

  tables:
    - match: '^\s*(\[\[\]\]|\[\[\..*\]\]|\[\[.*\.\]\]|\[\[.*\.\..*\]\]|\[\[.*[\[\]#].*\]\]|\[\[.*\]\].+\n)'
      comment: non-empty etc. like tables, see below!
      push:
        - meta_scope: invalid.illegal.table.array.toml
        - match: '(?=^\s*\[?\[.*\]\]?)'
          pop: true
    - match: '^\s*(\[\[)([A-Za-z_\-][A-Za-z0-9_\-\.]*)(\]\])\s*'
      comment: A named TOML-Table-Array
      captures:
        1: punctuation.definition.table.array.toml
        2: entity.other.attribute-name.table.array.toml
        3: punctuation.definition.table.array.toml
      push:
        - meta_scope: meta.tag.table.array.toml
        - match: '(?=^\s*\[?\[[A-Za-z_\-][A-Za-z0-9_\-\.]*\]\]?)'
          pop: true
        - include: comments
        - include: keys
        - include: illegal
    - match: '^\s*(\[\]|\[\..*\]|\[.*\.\]|\[.*\.\..*\]|\[.*[\[\]#].*\]|\[.*\].+\n)'
      comment: 'Each table name segment must be non-empty, must not contain the characters ''['', '']'' or ''#'' and is delimited by a ''.''.  Tables "appear in square brackets *on a line by themselves*"'
      push:
        - meta_scope: invalid.illegal.table.toml
        - match: '(?=^\s*\[?\[.*\]\]?)'
          pop: true
    - match: '^\s*(\[)([A-Za-z_\-][A-Za-z0-9_\-\.]*)(\])\s*'
      comment: A named TOML-Table
      captures:
        1: punctuation.definition.table.toml
        2: entity.other.attribute-name.table.toml
        3: punctuation.definition.table.toml
      push:
        - meta_scope: meta.tag.table.toml
        - match: '(?=^\s*\[?\[[A-Za-z_\-][A-Za-z0-9_\-\.]*\]\]?)'
          pop: true
        - include: comments
        - include: keys
        - include: illegal
