# SYNTAX TEST "Packages/sublime_toml_highlighting/TOML.sublime-syntax"

# This is a TOML document. Boom.
# <- comment.line.number-sign punctuation.definition.comment
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ comment.line.number-sign

##############################################################################
# Table name tests
##############################################################################
[table]
# <- meta.tag.table punctuation.definition.table
#^^^^^ meta.tag.table entity.other.attribute-name.table
#     ^ meta.tag.table punctuation.definition.table

[nested.table]
# <- punctuation.definition.table
#^^^^^^^^^^^^ meta.tag.table entity.other.attribute-name.table
#            ^ meta.tag.table punctuation.definition.table

[a.b.c]
# <- meta.tag.table punctuation.definition.table
#^^^^^ meta.tag.table entity.other.attribute-name.table
#     ^ meta.tag.table punctuation.definition.table

# Not yet supported:
#[table]  # comment
#['quoted']
#["quoted"]
#[ d.e.f ]
#[ g .  h  . i ]
#[ j . "Êž" . 'l' ]
#['a'."b"]

#-----------------------------------------------------------------------------
# Array tables
#-----------------------------------------------------------------------------
 [[array-table]]
#^^ meta.tag.table.array punctuation.definition.table.array
#  ^^^^^^^^^^^ meta.tag.table.array entity.other.attribute-name.table.array
#             ^^ meta.tag.table.array punctuation.definition.table.array

# Not yet supported:
# [[a.b.'nest'."name"]]

#-----------------------------------------------------------------------------
# Invalid tables
#-----------------------------------------------------------------------------
[]     # INVALID
# <- meta.tag.table.array invalid.illegal
#^^^^^^^^^^^^^^^ meta.tag.table.array invalid.illegal
 [[]]
#^^^^ meta.tag.table.array invalid.illegal
 [ ]
#^^^ meta.tag.table.array invalid.illegal
 [ [ ] ]
#^^^^^^^ meta.tag.table.array invalid.illegal
[a.]   # INVALID
# <- invalid.illegal.table
#^^^^^^^^^^^^^^^^ invalid.illegal.table
[a..] # INVALID
#^^^^^^^^^^^^^^^ invalid.illegal.table
[.b]   # INVALID
#^^^^^^^^^^^^^^^^ invalid.illegal.table
[.]    # INVALID
#^^^^^^^^^^^^^^^^ invalid.illegal.table
[table]key = 123
#^^^^^^^^^^^^^^^^ invalid.illegal.table
[a'asdf']
#^^^^^^^^ invalid.illegal
[!@$%^&*]
#^^^^^^^^ invalid.illegal
[
#<- invalid.illegal
["
#^ invalid.illegal
['
#^ invalid.illegal
[[
#^ invalid.illegal
 [[]
#^^^^ invalid.illegal.table
 [[array]
#^^^^^^^^^ invalid.illegal.table
 [ [array]]
#^^^^^^^^^^^ invalid.illegal.table
 [[array] ]
#^^^^^^^^^^^ invalid.illegal.table
 [a[b]
#^^^^^^ invalid.illegal.table
 [a b]
#^^^^^ invalid.illegal

# This does do error recovery:
# [a#b]

##############################################################################
# Keys
##############################################################################
 key = 123 # Comment
#<- -keyword.key
#^^^ keyword.key
#    ^ punctuation.definition.keyValuePair
#      ^^^ constant.numeric.integer
#          ^ comment.line.number-sign punctuation.definition.comment
#          ^^^^^^^^^ comment.line.number-sign
nospace=123
#<- keyword.key
#^^^^^^ keyword.key
#      ^ punctuation.definition.keyValuePair
#       ^^^ constant.numeric.integer
 'key' = 123
#^^^^^ keyword.key
#      ^ punctuation.definition.keyValuePair
#        ^^^ constant.numeric.integer
 "key" = 123
#^^^^^ keyword.key
#      ^ punctuation.definition.keyValuePair
#        ^^^ constant.numeric.integer
 "key\b\t\n\f\r\"\\\u1234\U12345678" = 123
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ keyword.key
#                                    ^ punctuation.definition.keyValuePair
#                                      ^^^ constant.numeric.integer
'quoted "value"' = "value"
#<- keyword.key
#^^^^^^^^^^^^^^^ keyword.key
#                ^ punctuation.definition.keyValuePair
#                  ^^^^^^^ string.quoted.single.basic.line
 123 = 123
#^^^ keyword.key
#    ^ punctuation.definition.keyValuePair
#      ^^^ constant.numeric.integer

#-----------------------------------------------------------------------------
# Invalid keys
#-----------------------------------------------------------------------------
 key
#^^^ invalid.illegal
 key =
#^^^^^ invalid.deprecated.noValueGiven
 key =
 1
#^ invalid.illegal
key key
#^^^^^^ invalid.illegal
key key = 1
#^^^^^^^^^^ invalid.illegal
 '
#^ invalid.illegal
 'key
#^^^^ invalid.illegal
 "
#^ invalid.illegal
 "key
#^^^^ invalid.illegal
 key.,!@$%^&**&()
#^^^^^^^^^^^^^^^^ invalid.illegal
 !@$%^&*()
#^^^^^^^^^ invalid.illegal
 =
#^ invalid.illegal.noKeyDefined
 = 123
#^^^^^ invalid.illegal.noKeyDefined

##############################################################################
# Invalid values
##############################################################################
key = value
#     ^^^^^ invalid.illegal
# This is erroneously accepted:
key = 123'asdf'
#^^ keyword.key
#   ^ punctuation.definition.keyValuePair
#     ^^^ constant.numeric.integer
#        ^^^^^^ string.quoted.single.literal.line
key# comment
#^^^^^^^^^^^ invalid.illegal
key = = 1
#     ^^^ invalid.illegal.noKeyDefined
a = 1 b = 2
#    ^^^^^^ invalid.illegal

##############################################################################
# Boolean
##############################################################################
key = true
#     ^^^^ constant.language
key = false # COMMENT
#     ^^^^^ constant.language
#           ^^^^^^^^^ comment.line.number-sign

#-----------------------------------------------------------------------------
# Invalid boolean
#-----------------------------------------------------------------------------
key = truefalse
#     ^^^^^^^^^ invalid.illegal
key = true123
#     ^^^^^^^ invalid.illegal
key = true!
#         ^ invalid.illegal

##############################################################################
# Integer
##############################################################################
a = 0 # Comment
#   ^ constant.numeric.integer
#     ^^^^^^^^^ comment.line.number-sign
# Spec needs clarification here, see: https://github.com/toml-lang/toml/issues/389
a = +0
#   ^^ invalid.illegal
a = -0
#   ^^ invalid.illegal
a = 123
#   ^^^ constant.numeric.integer
a = -456
#   ^^^^ constant.numeric.integer

# Not yet supported:
#a = 1_000
#a = 5_349_221
#a = 1_2_3_4_5     # VALID but discouraged

#-----------------------------------------------------------------------------
# Invalid integers
#-----------------------------------------------------------------------------
a = 0000
#   ^^^^ invalid.illegal
a = 0123
#   ^^^^ invalid.illegal
a = -012
#   ^^^^ invalid.illegal
a = 123abc
#   ^^^^^^ invalid.illegal
a = 123 abc
#      ^^^^ invalid.illegal
a = 123true
#   ^^^^^^^ invalid.illegal
a = 123+123
#      ^^^^ invalid.illegal
a = 1 2
#    ^^ invalid.illegal
a = 1__2
#   ^^^^ invalid.illegal
a = 1_
#   ^^ invalid.illegal
a = _
#   ^ invalid.illegal
a = _1
#   ^^ invalid.illegal
a = 1 2
#    ^^ invalid.illegal


##############################################################################
# Float
##############################################################################
a = +1.0
#   ^^^^ constant.numeric.float
a = 3.1415
#   ^^^^^^ constant.numeric.float
a = -0.01
#   ^^^^^ constant.numeric.float
a = 5e+22
#   ^^^^^ constant.numeric.float
a = 1e6
#   ^^^ constant.numeric.float
a = -2E-2
#   ^^^^^ constant.numeric.float
a = 6.626e-34
#   ^^^^^^^^^ constant.numeric.float

# Not yet supported:
#a = 9_224_617.445_991_228_313

#-----------------------------------------------------------------------------
# Invalid float
#-----------------------------------------------------------------------------
a = x1.0
#   ^^^^ invalid.illegal
# This is erroneously accepted:
a = 0.
#   ^^ constant.numeric.float
a = .0
#   ^^ invalid.illegal
a = +.0
#   ^^^ invalid.illegal
a = 1e
#   ^^ invalid.illegal
a = 1.1__2
#    ^^^^^ invalid.illegal
a = 1._
#    ^^ invalid.illegal
a = 1._2
#    ^^^ invalid.illegal
a = 1.2_
#    ^^^ invalid.illegal
a = 1_.2
#   ^^^^ invalid.illegal
a = _1.2
#   ^^^^ invalid.illegal
a = -.123
#   ^^^^^ invalid.illegal
a = 03.13
#   ^^^^^ invalid.illegal
a = -03.13
#   ^^^^^^ invalid.illegal



##############################################################################
# Date-Time
##############################################################################
odt1 = 1979-05-27T07:32:00Z
#      ^^^^^^^^^^^^^^^^^^^^ constant.other.datetime
odt2 = 1979-05-27T00:32:00-07:00
#      ^^^^^^^^^^^^^^^^^^^^^^^^^ constant.other.datetime
odt3 = 1979-05-27T00:32:00.999999-07:00
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant.other.datetime

# Not yet supported:
#ldt1 = 1979-05-27T07:32:00
#ldt2 = 1979-05-27T00:32:00.999999
#ld1 = 1979-05-27
#lt1 = 07:32:00
# lt2 = 00:32:00.999999

#-----------------------------------------------------------------------------
# Invalid Date-Time
#-----------------------------------------------------------------------------
a = 9999-99-99
#       ^^^^^^ invalid.illegal
a = 1999-12-31T
#       ^^^^^^^ invalid.illegal
no-leads = 1987-7-05T17:45:00Z
#              ^^^^^^^^^^^^^^^ invalid.illegal
no-secs = 1987-07-05T17:45Z
#             ^^^^^^^^^^^^^ invalid.illegal
no-t = 1987-07-0517:45:00Z
#          ^^^^^^^^^^^^^^^ invalid.illegal
with-milli = 1987-07-5T17:45:00.12Z
#                ^^^^^^^^^^^^^^^^^^ invalid.illegal


##############################################################################
# String
##############################################################################
s = "" # Comment
#   ^^ string.quoted.single.basic.line
#      ^ comment.line.number-sign punctuation.definition.comment
#      ^^^^^^^^^ comment.line.number-sign
s = "I'm a string. \"You can quote me\". Name\tJos\u00E9\nLocation\tSF."
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.single.basic.line
s = "\b\t\n\f\r\"\\\u1234\U12345678"
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.single.basic.line
s = ''
#   ^^ string.quoted.single.literal.line
winpath  = 'C:\Users\nodejs\templates'
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.single.literal.line
winpath2 = '\\ServerX\admin$\system32\'
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.single.literal.line
quoted   = 'Tom "Dubs" Preston-Werner'
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.single.literal.line
regex    = '<\i\c*\s*>'
#          ^^^^^^^^^^^^ string.quoted.single.literal.line
str1 = """
#      ^^^ string.quoted.triple.basic.block
Roses are red
#^^^^^^^^^^^^^ string.quoted.triple.basic.block
Violets are blue"""
#^^^^^^^^^^^^^^^^^^ string.quoted.triple.basic.block
str2 = """
#      ^^^ string.quoted.triple.basic.block
The quick brown \
#^^^^^^^^^^^^^^^^^ string.quoted.triple.basic.block

  fox jumps over \
    the lazy dog."""
#^^^^^^^^^^^^^^^^^^^ string.quoted.triple.basic.block
str3 = """\
#      ^^^^^ string.quoted.triple.basic.block
       The quick brown \
#^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.triple.basic.block
       fox jumps over \
       the lazy dog.\
       """
#      ^^^ string.quoted.triple.basic.block
s = """\b\t\n\f\r\"\\\u1234\U12345678"""
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.triple.basic.block
s = """"""
#   ^^^^^^ string.quoted.triple.basic.block
regex2 = '''I [dw]on't need \d{2} apples'''
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.triple.literal.block
lines  = '''
#        ^^^^ string.quoted.triple.literal.block
The first newline is
#^^^^^^^^^^^^^^^^^^^^ string.quoted.triple.literal.block
trimmed in raw strings.
   All other whitespace
   is preserved.
'''
#^^ string.quoted.triple.literal.block
s = ''''''
#   ^^^^^^ string.quoted.triple.literal.block

#-----------------------------------------------------------------------------
# Invalid string
#-----------------------------------------------------------------------------
s = "
#   ^ invalid.illegal
s = '
#   ^ invalid.illegal
s = '' true
#     ^^^^^ invalid.illegal

# Erroneously accepted:
s = ''''''''''''
#   ^^^^^^^^^^^^ string.quoted.triple.literal.block
s = """"""""
#   ^^^^^^ string.quoted.triple.basic.block
#         ^^ string.quoted.single.basic.line

##############################################################################
# Array
##############################################################################
empty = [] # Comment
#       ^^ punctuation.definition.array
#          ^^^^^^^^^ comment.line.number-sign
empty = [
#       ^ punctuation.definition.array
# Interior comment
#^^^^^^^^^^^^^^^^^ comment.line.number-sign
]
#<- punctuation.definition.array

a = [ # Comment
#     ^^^^^^^^^ comment.line.number-sign
#   ^ punctuation.definition.array

  1,
# ^ constant.numeric.integer
#  ^^ source.toml

]
#<- punctuation.definition.array

arr1 = [ 1, 2, 3 ] # Comment
#      ^ punctuation.definition.array
#        ^ constant.numeric.integer
#           ^ constant.numeric.integer
#              ^ constant.numeric.integer
#                ^ punctuation.definition.array
#                  ^^^^^^^^^ comment.line.number-sign
arr2 = [ "red", "yellow", "green" ]
#      ^ punctuation.definition.array
#        ^^^^^ string.quoted.single.basic.line
#               ^^^^^^^^ string.quoted.single.basic.line
#                          ^^^^^^ string.quoted.single.basic.line
#                                 ^ punctuation.definition.array
arr3 = [ [ 1, 2 ], [3, 4, 5] ]
#      ^ punctuation.definition.array
#        ^ punctuation.definition.array
#          ^ constant.numeric.integer
#             ^ constant.numeric.integer
#               ^ punctuation.definition.array
#                  ^ punctuation.definition.array
#                   ^ constant.numeric.integer
#                      ^ constant.numeric.integer
#                         ^ constant.numeric.integer
#                          ^ punctuation.definition.array
#                            ^ punctuation.definition.array
arr4 = [ "all", 'strings', """are the same""", '''type''']
#        ^^^^^ string.quoted.single.basic.line
#               ^^^^^^^^^ string.quoted.single.literal.line
#                          ^^^^^^^^^^^^^^^^^^ string.quoted.triple.basic.block
#                                              ^^^^^^^^^^ string.quoted.triple.literal.block
#                                                        ^ punctuation.definition.array
arr5 = [ [ 1, 2 ], ["a", "b", "c"] ]
#      ^ punctuation.definition.array
#        ^ punctuation.definition.array
#               ^ punctuation.definition.array
#                  ^ punctuation.definition.array
#                                ^ punctuation.definition.array
#                                  ^ punctuation.definition.array
arr7 = [
#      ^ punctuation.definition.array
  1, 2, 3
# ^ constant.numeric.integer
]
#<- punctuation.definition.array
arr8 = [
  1,
# ^ constant.numeric.integer
  2, # this is ok
# ^ constant.numeric.integer
#    ^^^^^^^^^^^^ comment.line.number-sign
]
# <- punctuation.definition.array

#-----------------------------------------------------------------------------
# Invalid array (but accepted)
#-----------------------------------------------------------------------------
# Mixed types aren't allowed.
arr6 = [ 1, 2.0, true, 1999-12-31,
#      ^ punctuation.definition.array
#        ^ constant.numeric.integer
#           ^^^ constant.numeric.float
        's', "s", '''s''', """s""",
#       ^^^ string.quoted.single.literal.line
#            ^^^ string.quoted.single.basic.line
#                 ^^^^^^^ string.quoted.triple.literal.block
#                          ^^^^^^^ string.quoted.triple.basic.block
        [], {},
#       ^^ punctuation.definition.array
#           ^^ punctuation.definition.inlinetable
]
# <- punctuation.definition.array
a = ["s" asdf]
#   ^ punctuation.definition.array
#    ^^^ string.quoted.single.basic.line
#            ^ punctuation.definition.array

a = [,]
#   ^ punctuation.definition.array
#     ^ punctuation.definition.array
a = [1,,2]
#       ^ constant.numeric.integer
#        ^ punctuation.definition.array
a = [&*^%$*]
#   ^ punctuation.definition.array
#          ^ punctuation.definition.array
a = [1, 2, name]
#              ^ punctuation.definition.array


##############################################################################
# Inline Table
##############################################################################
table = {  } # Comment
#^^^^ keyword.key
#     ^ punctuation.definition.keyValuePair
#       ^ punctuation.definition.inlinetable
#          ^ punctuation.definition.inlinetable
#            ^^^^^^^^^ comment.line.number-sign
table = {key = 123} # Comment
#       ^ punctuation.definition.inlinetable
#        ^^^ keyword.key
#            ^ punctuation.definition.keyValuePair
#                 ^ punctuation.definition.inlinetable
#                   ^^^^^^^^^ comment.line.number-sign
name = { first = "Tom", last = "Preston-Werner" }
#^^^ keyword.key
#        ^^^^^ keyword.key
#              ^ punctuation.definition.keyValuePair
#                ^^^^^ string.quoted.single.basic.line
#                       ^^^^ keyword.key
#                            ^ punctuation.definition.keyValuePair
#                              ^^^^^^^^^^^^^^^^ string.quoted.single.basic.line
#                                               ^ punctuation.definition.inlinetable
point = { x = 1, y = 2 }
#       ^ punctuation.definition.inlinetable
#         ^ keyword.key
#           ^ punctuation.definition.keyValuePair
#             ^ constant.numeric.integer
#                ^ keyword.key
#                  ^ punctuation.definition.keyValuePair
#                    ^ constant.numeric.integer
#                      ^ punctuation.definition.inlinetable
t = {b=true, i=1, f=1.0, dt=1979-05-27T07:32:00Z, s1='s', s2="s", s3='''s''', s4="""s""", a=[1], t={k=1}}
#   ^ punctuation.definition.inlinetable
#    ^ keyword.key
#     ^ punctuation.definition.keyValuePair
#      ^^^^ constant.language
#            ^ keyword.key
#             ^ punctuation.definition.keyValuePair
#              ^ constant.numeric.integer
#                 ^ keyword.key
#                  ^ punctuation.definition.keyValuePair
#                   ^^^ constant.numeric.float
#                        ^^ keyword.key
#                          ^ punctuation.definition.keyValuePair
#                           ^^^^^^^^^^^^^^^^^^^^ constant.other.datetime
#                                                 ^^ keyword.key
#                                                   ^ punctuation.definition.keyValuePair
#                                                    ^^^ string.quoted.single.literal.line
#                                                         ^^ keyword.key
#                                                           ^ punctuation.definition.keyValuePair
#                                                            ^^^ string.quoted.single.basic.line
#                                                                 ^^ keyword.key
#                                                                   ^ punctuation.definition.keyValuePair
#                                                                    ^^^^^^^ string.quoted.triple.literal.block
#                                                                             ^^ keyword.key
#                                                                               ^ punctuation.definition.keyValuePair
#                                                                                ^^^^^^^ string.quoted.triple.basic.block
#                                                                                         ^ keyword.key
#                                                                                          ^ punctuation.definition.keyValuePair
#                                                                                           ^ punctuation.definition.array
#                                                                                            ^ constant.numeric.integer
#                                                                                             ^ punctuation.definition.array
#                                                                                                ^ keyword.key
#                                                                                                 ^ punctuation.definition.keyValuePair
#                                                                                                  ^ punctuation.definition.inlinetable
#                                                                                                   ^ keyword.key
#                                                                                                    ^ punctuation.definition.keyValuePair
#                                                                                                     ^ constant.numeric.integer
#                                                                                                      ^^ punctuation.definition.inlinetable

# Invalid but accepted:
t = {,}
#   ^ punctuation.definition.inlinetable
#     ^ punctuation.definition.inlinetable
t = {
}
#<- punctuation.definition.inlinetable
t = {key=1,}
#          ^ punctuation.definition.inlinetable
t = {key}
#       ^ punctuation.definition.inlinetable
t = {key=1, asdf}
#               ^ punctuation.definition.inlinetable

#-----------------------------------------------------------------------------
# Invalid inline table
#-----------------------------------------------------------------------------
t = {=}
#    ^^ invalid.illegal
t = {key=1 asdf}
#          ^^^^^ invalid.illegal
t = {key=invalid}
#        ^^^^^^^^ invalid.illegal
t = {!=123}
#     ^^^^^ invalid.illegal
